class Solution {
public:
    struct Task{
        int start = 0;
        int end = 0;
        int index = 0;
        Task(int start, int end, int index) : start(start), end(end), index(index) {} 
    };
    struct startComparator{
        bool operator()(const Task& t1, const Task& t2) const
        {
            return t1.start > t2.start;
        }
    };
    struct endComparator{
        bool operator()(const Task& t1, const Task& t2) const
        {
            return t1.end > t2.end;
        }
    };
    priority_queue<Task, vector<Task>, startComparator> startTime;
    priority_queue<Task, vector<Task>, endComparator> endTime;
    priority_queue<int, vector<int>, std::greater<>> freeChairs;
    unordered_map<int, int> mappy;
    int smallestChair(vector<vector<int>>& times, int targetFriend) {
        for(int i = 0; i < times.size(); i++)
        {
            Task t(times[i][0], times[i][1], i);
            startTime.push(t);
            freeChairs.push(i);
        }
        while(!startTime.empty() || !endTime.empty())
        {
            while(endTime.empty() || (!startTime.empty() && startTime.top().start < endTime.top().end))
            {
                if(startTime.top().index == targetFriend)
                    return freeChairs.top();
                mappy[startTime.top().index] = freeChairs.top();
                freeChairs.pop();
                endTime.push(startTime.top());
                startTime.pop();
            }
            if(startTime.empty())
                return -1;
            while(!endTime.empty() && startTime.top().start >= endTime.top().end)
            {
                freeChairs.push(mappy[endTime.top().index]);
                endTime.pop();
            }
        }
        return -1;
    }
};